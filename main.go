package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"image"
	"image/draw"
	_ "image/gif"
	_ "image/jpeg"
	"image/png"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv" // !!! –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
	"github.com/nfnt/resize"
)

const (
	removeBgAPIURL  = "https://api.remove.bg/v1.0/removebg"
	framePath       = "frame.png"
	targetFrameSize = 1200
	padding         = 130
)

var httpClient = &http.Client{
	Timeout: 30 * time.Second,
}

func main() {
	// --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) ---
	// godotenv.Load() –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª.
	// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Cloud Run),
	// —Ç–æ godotenv.Load() –∏—Ö –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç.
	err := godotenv.Load()
	if err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞/–æ–±–ª–∞–∫–∞):", err)
	}
	// --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ .env ---

	// --- –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatalf("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.")
	}

	removeBgAPIKey := os.Getenv("REMOVE_BG_API_KEY")
	if removeBgAPIKey == "" {
		log.Fatalf("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REMOVE_BG_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.")
	}
	// --- –ö–æ–Ω–µ—Ü —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ ---

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panicf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: %v", err)
	}

	bot.Debug = true

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	go func() {
		log.Printf("–ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Cloud Run Health Checks –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
		http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
			fmt.Fprint(w, "Bot is running!")
		})
		if err := http.ListenAndServe(":"+port, nil); err != nil {
			log.Fatalf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Health Checks: %v", err)
		}
	}()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	frameImage, err := loadFrame(framePath)
	if err != nil {
		log.Fatalf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–º–∫—É –∏–∑ '%s': %v. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (PNG). –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–∞–º–∫–∏.", framePath, err)
	}

	frameImage = resize.Resize(targetFrameSize, targetFrameSize, frameImage, resize.Lanczos3)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
			switch update.Message.Command() {
			case "start":
				msg.Text = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –¥–æ–±–∞–≤–ª—é –∫ –Ω–µ–º—É —Ä–∞–º–∫—É üé®, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É—é —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω!"
			default:
				msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
			}
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '%s' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", msg.Text, update.Message.Chat.ID, err)
			}
		} else if update.Message.Photo != nil {
			handlePhoto(bot, update.Message, frameImage, removeBgAPIKey)
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", update.Message.Chat.ID, err)
			}
		}
	}
}

func sendErrorMessage(bot *tgbotapi.BotAPI, chatID int64, userMessage string, internalError error) {
	log.Printf("–í–ù–£–¢–†–ï–ù–ù–Ø–Ø –û–®–ò–ë–ö–ê –¥–ª—è —á–∞—Ç–∞ %d: %v. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: '%s'", chatID, internalError, userMessage)
	msg := tgbotapi.NewMessage(chatID, userMessage)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
	}
}

func loadFrame(path string) (image.Image, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Ä–∞–º–∫–∏ '%s': %w", path, err)
	}
	defer file.Close()

	img, _, err := image.Decode(file)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–º–∫—É '%s': %w", path, err)
	}
	return img, nil
}

func resizeAndPlaceImage(userImage image.Image, frame image.Image, padding int) (image.Image, error) {
	frameBounds := frame.Bounds()
	frameWidth := frameBounds.Dx()
	frameHeight := frameBounds.Dy()

	maxContentWidth := frameWidth - 2*padding
	maxContentHeight := frameHeight - 2*padding

	if maxContentWidth <= 0 || maxContentHeight <= 0 {
		return nil, fmt.Errorf("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–∞–º–∫–∏ (%dx%d) –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ (%d). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ frame.png –∏ –∑–Ω–∞—á–µ–Ω–∏–µ padding.", frameWidth, frameHeight, padding)
	}

	userImageBounds := userImage.Bounds()
	userImageWidth := userImageBounds.Dx()
	userImageHeight := userImageBounds.Dy()

	scaleWidth := float64(maxContentWidth) / float64(userImageWidth)
	scaleHeight := float64(maxContentHeight) / float64(userImageHeight)

	scale := scaleWidth
	if scaleHeight < scale {
		scale = scaleHeight
	}

	newWidth := int(float64(userImageWidth) * scale)
	newHeight := int(float64(userImageHeight) * scale)

	resizedUserImage := resize.Resize(uint(newWidth), uint(newHeight), userImage, resize.Lanczos3)

	finalImage := image.NewRGBA(frameBounds)

	x := (frameWidth - resizedUserImage.Bounds().Dx()) / 2
	y := (frameHeight - resizedUserImage.Bounds().Dy()) / 2

	draw.Draw(finalImage, resizedUserImage.Bounds().Add(image.Point{x, y}), resizedUserImage, resizedUserImage.Bounds().Min, draw.Src)

	return finalImage, nil
}

func removeBackground(imageBytes []byte, apiKey string) ([]byte, error) {
	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	part, err := writer.CreateFormFile("image_file", "image.png")
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Ñ–∞–π–ª–∞ –¥–ª—è remove.bg: %w", err)
	}
	_, err = io.Copy(part, bytes.NewReader(imageBytes))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º—É –¥–ª—è remove.bg: %w", err)
	}

	err = writer.WriteField("size", "auto")
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—è 'size' –¥–ª—è remove.bg: %w", err)
	}

	err = writer.WriteField("format", "png")
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—è 'format' –¥–ª—è remove.bg: %w", err)
	}

	writer.Close()

	req, err := http.NewRequest("POST", removeBgAPIURL, body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ remove.bg: %w", err)
	}

	req.Header.Set("X-Api-Key", apiKey)
	req.Header.Set("Content-Type", writer.FormDataContentType())
	req.Header.Set("Accept", "image/png")

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ remove.bg: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		errorBody, _ := io.ReadAll(resp.Body)
		var apiError struct {
			Errors []struct {
				Title string `json:"title"`
				Code  string `json:"code"`
			} `json:"errors"`
		}
		if json.Unmarshal(errorBody, &apiError) == nil && len(apiError.Errors) > 0 {
			return nil, fmt.Errorf("API remove.bg –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (%d): %s (–∫–æ–¥: %s)", resp.StatusCode, apiError.Errors[0].Title, apiError.Errors[0].Code)
		}
		return nil, fmt.Errorf("API remove.bg –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %s. –û—Ç–≤–µ—Ç: %s", resp.Status, string(errorBody))
	}

	resultBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç remove.bg: %w", err)
	}

	return resultBytes, nil
}

func handlePhoto(bot *tgbotapi.BotAPI, message *tgbotapi.Message, frameImage image.Image, removeBgAPIKey string) {
	chatID := message.Chat.ID
	if len(message.Photo) == 0 {
		sendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ"))
		return
	}
	photo := message.Photo[len(message.Photo)-1]

	fileURL, err := bot.GetFileDirectURL(photo.FileID)
	if err != nil {
		sendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", fmt.Errorf("GetFileDirectURL –¥–ª—è FileID %s: %w", photo.FileID, err))
		return
	}

	log.Printf("–ü—Ä—è–º–æ–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %s", fileURL)

	fileBytes, err := downloadFile(fileURL)
	if err != nil {
		sendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", fmt.Errorf("—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å URL '%s': %w", fileURL, err))
		return
	}

	userImage, imgFormat, err := image.Decode(bytes.NewReader(fileBytes))
	if err != nil {
		sendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.", fmt.Errorf("–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–æ—Ä–º–∞—Ç: %s, —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç–æ–≤: %d): %w", imgFormat, len(fileBytes), err))
		return
	}
	log.Printf("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ. –§–æ—Ä–º–∞—Ç: %s, –†–∞–∑–º–µ—Ä: %dx%d", imgFormat, userImage.Bounds().Dx(), userImage.Bounds().Dy())

	imageOnCanvas, err := resizeAndPlaceImage(userImage, frameImage, padding)
	if err != nil {
		sendErrorMessage(bot, chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –Ω–∞–ª–æ–∂–µ–Ω–∏—é —Ä–∞–º–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.", fmt.Errorf("–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %w", err))
		return
	}

	finalCombinedImage := image.NewRGBA(frameImage.Bounds())
	draw.Draw(finalCombinedImage, finalCombinedImage.Bounds(), imageOnCanvas, imageOnCanvas.Bounds().Min, draw.Src)
	draw.Draw(finalCombinedImage, finalCombinedImage.Bounds(), frameImage, frameImage.Bounds().Min, draw.Over)

	framedImageBuf := new(bytes.Buffer)
	if err := png.Encode(framedImageBuf, finalCombinedImage); err != nil {
		sendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞.", fmt.Errorf("–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–º–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PNG –¥–ª—è remove.bg: %w", err))
		return
	}

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–º–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ remove.bg –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞...")
	sendTempMessage(bot, chatID, "–í–∞—à–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... –£–¥–∞–ª—è—é —Ñ–æ–Ω, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")

	imageWithNoBgBytes, err := removeBackground(framedImageBuf.Bytes(), removeBgAPIKey)
	if err != nil {
		sendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º –∏–ª–∏ API –∫–ª—é—á–æ–º, –∏–ª–∏ –ª–∏–º–∏—Ç–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à remove.bg –∞–∫–∫–∞—É–Ω—Ç.", fmt.Errorf("—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é remove.bg: %w", err))
		return
	}
	log.Printf("–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

	documentMsg := tgbotapi.NewDocument(chatID, tgbotapi.FileBytes{
		Name:  "framed_photo_no_bg.png",
		Bytes: imageWithNoBgBytes,
	})
	documentMsg.Caption = "–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å —Ä–∞–º–∫–æ–π –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º (–±–µ–∑ —Å–∂–∞—Ç–∏—è)."

	if _, err := bot.Send(documentMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
	} else {
		log.Printf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d.", chatID)
	}
}

func downloadFile(url string) ([]byte, error) {
	resp, err := httpClient.Get(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ HTTP-–∑–∞–ø—Ä–æ—Å–µ –∫ %s: %w", url, err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		errorBody, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("–Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å HTTP: %s. –û—Ç–≤–µ—Ç: %s (URL: %s)", resp.Status, string(errorBody), url)
	}

	buf := new(bytes.Buffer)
	_, err = buf.ReadFrom(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑ %s: %w", url, err)
	}

	return buf.Bytes(), nil
}

func sendTempMessage(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
	}
}
